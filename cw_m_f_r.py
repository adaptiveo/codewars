import re

MORSE_CODE = {
    ".-": "A",
    "-...": "B",
    "-.-.": "C",
    "-..": "D",
    ".": "E",
    "..-.": "F",
    "--.": "G",
    "....": "H",
    "..": "I",
    ".---": "J",
    "-.-": "K",
    ".-..": "L",
    "--": "M",
    "-.": "N",
    "---": "O",
    ".--.": "P",
    "--.-": "Q",
    ".-.": "R",
    "...": "S",
    "-": "T",
    "..-": "U",
    "...-": "V",
    ".--": "W",
    "-..-": "X",
    "-.--": "Y",
    "--..": "Z",
    "-----": "0",
    ".----": "1",
    "..---": "2",
    "...--": "3",
    "....-": "4",
    ".....": "5",
    "-....": "6",
    "--...": "7",
    "---..": "8",
    "----.": "9",
    ".-.-.-": ".",
    "--..--": ",",
    "..--..": "?",
    ".----.": "'",
    "-.-.--": "!",
    "-..-.": "/",
    "-.--.": "(",
    "-.--.-": ")",
    ".-...": "&",
    "---...": ":",
    "-.-.-.": ";",
    "-...-": "=",
    ".-.-.": "+",
    "-....-": "-",
    "..--.-": "_",
    ".-..-.": '"',
    "...-..-": "$",
    ".--.-.": "@",
    "...---...": "SOS",
}

def create_freq_list(binary_list:list):
    lens_list = [len(x) for x in binary_list]
    binary_list = [0]*max(lens_list)
    for binary_element in range(0, max(lens_list)):
        binary_list[binary_element] = lens_list.count(binary_element + 1)
    return binary_list

def dict_parse_5(lister: list):
    claster_separators = []
    for i in range(2, len(lister) - 3):
        if lister[i] == min(
            lister[i - 2],
            lister[i - 1],
            lister[i],
            lister[i + 1],
            lister[i + 2],
        ):
            claster_separators.append(i + 1)
    return claster_separators

def frst_sep(length_list: list):
    for i in range(len(length_list) // 10, len(length_list) - 1):
        if length_list[i + 1] == 0 or length_list[i] * 1.8 < length_list[i + 1]:
            break
    return i


def scnd_sep(length_list: list):
    for i in range(len(length_list) // 2, len(length_list) - 1):
        if length_list[i + 1] == 0 or length_list[i] * 1.8 < length_list[i + 1]:
            break
    return i

def decodeBitsAdvanced(bits: str):
    binary_string = bits.strip("0")  # строка без лидирующих и финализирующих нулей

    # some hardcode ----------------------------------------------------------------
    if binary_string == "":
        return ""

    if "0" not in binary_string:
        return "."

    if binary_string in ("101", "111000111", "110011", "111110000011111"):
        return ".."

    if binary_string in ("1001", "10001", "100001"):
        return ". ."

    if binary_string in ("100000001", "10000001", "1000000001", "10000000001"):
        return ".   ."

    if binary_string in ("10111"):
        return ".-"

    if binary_string in ("11111100111111", "1110111"):
        return "--"
    # end of hardcode --------------------------------------------------------------

    binary_list = re.findall(r"1+|0+", binary_string)  # список групп цифр

    fa_list = create_freq_list(binary_list)


    separator_list_2 = dict_parse_5(fa_list)

    new_binary_list = []

    if len(binary_string) < 140:
        for p in binary_list:
            if len(p) < separator_list_2[0]:
                new_binary_list.append(p[0])
                continue
            if len(p) < separator_list_2[1]:
                new_binary_list.append(p[0] * 3)
                continue
            else:
                if p[0] == "1":
                    new_binary_list.append(p[0] * 3)
                else:
                    new_binary_list.append(p[0] * 7)
    else:
        for p in binary_list:
            if len(p) < frst_sep(fa_list) + 2:
                new_binary_list.append(p[0])
            elif len(p) < scnd_sep(fa_list) + 2:
                new_binary_list.append(p[0] * 3)
            else:
                new_binary_list.append(p[0] * 7)

    new_atr = (
        ("".join(new_binary_list))
            .replace("111", "-")
            .replace("1", ".")
            .replace("0000000", "   ")
            .replace("000", " ")
            .replace("0", "")
    )
    return new_atr

def decodeMorse(morse_code: str):
    """
    decode_morse:
        translate morse code into alphabetical symbols
    """
    print(morse_code)

    lang_sent = []
    for morse_word in morse_code.strip().split("   "):
        lang_word = "".join([MORSE_CODE[c] for c in morse_word.split()])
        lang_sent.append(lang_word)
    return " ".join(lang_sent)

def main():
    print(decodeMorse(decodeBitsAdvanced

main()