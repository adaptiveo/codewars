"""
This module decodes real binary string into "right" binary string using k-means algorythm,
then decode binary sting into morse code and futher into alphabet symbols
···· · −·−−   ·−−− ··− −·· ·
"""

import re
import k_means as km
import freq_analize as fa

MORSE_CODE = {
    ".-": "A",
    "-...": "B",
    "-.-.": "C",
    "-..": "D",
    ".": "E",
    "..-.": "F",
    "--.": "G",
    "....": "H",
    "..": "I",
    ".---": "J",
    "-.-": "K",
    ".-..": "L",
    "--": "M",
    "-.": "N",
    "---": "O",
    ".--.": "P",
    "--.-": "Q",
    ".-.": "R",
    "...": "S",
    "-": "T",
    "..-": "U",
    "...-": "V",
    ".--": "W",
    "-..-": "X",
    "-.--": "Y",
    "--..": "Z",
    "-----": "0",
    ".----": "1",
    "..---": "2",
    "...--": "3",
    "....-": "4",
    ".....": "5",
    "-....": "6",
    "--...": "7",
    "---..": "8",
    "----.": "9",
    ".-.-.-": ".",
    "--..--": ",",
    "..--..": "?",
    ".----.": "'",
    "-.-.--": "!",
    "-..-.": "/",
    "-.--.": "(",
    "-.--.-": ")",
    ".-...": "&",
    "---...": ":",
    "-.-.-.": ";",
    "-...-": "=",
    ".-.-.": "+",
    "-....-": "-",
    "..--.-": "_",
    ".-..-.": '"',
    "...-..-": "$",
    ".--.-.": "@",
    "...---...": "SOS",
}


def decode_morse(morse_code: str):
    """
    decode_morse:
        translate morse code into alphabetical symbols
    """
    print(morse_code)

    lang_sent = []
    for morse_word in morse_code.strip().split("   "):
        lang_word = "".join([MORSE_CODE[c] for c in morse_word.split()])
        lang_sent.append(lang_word)
    return " ".join(lang_sent)


def decode_bits_advanced(bits: str):
    """
    decode_bits_advanced:
        correct binary string and return morse code
    """
    cbits = bits.strip("0")

    if cbits == "":
        return ""

    if cbits in ("1001", "10001", "100001"):
        return ". ."

    signal_list = re.findall(r"1+|0+", cbits)

    claster01, claster03, claster06 = km.k_means_ziros(re.findall(r"0+", cbits))
    claster11, claster13 = km.k_means_units(re.findall(r"1+", cbits))

    print(claster01, claster03, claster06, claster11, claster13, sep="\n")

    new_bits = ""

    stac = re.findall(r"1+|0+", cbits)

    for current_seq in stac:
        current_seq_str = str(current_seq)
        print(current_seq_str)
        if current_seq_str in claster11:
            new_bits += "."
        elif current_seq_str in claster13:
            new_bits += "-"
        elif current_seq_str in claster01 and current_seq_str[0] == "0":
            new_bits += ""
        elif current_seq_str in claster03 and current_seq_str[0] == "0":
            new_bits += " "
        elif current_seq_str in claster06 and current_seq_str[0] == "0":
            new_bits += "   "
    return new_bits

def sep(aaa:list):
    for i in range(len(aaa)//10, len(aaa) - 1):
        if aaa[i+1] == 0 or aaa[i]*1.8 < aaa[i+1]:
            break
    return i

def lsp(aaa:list):
    for i in range(len(aaa)//2, len(aaa) - 1):
        if aaa[i+1] == 0 or aaa[i]*1.8 < aaa[i+1]:
            break
    return i

def decode_bits_advanced_2(bits: str):

    binary_string = bits.strip("0") # строка без лидирующих и финализирующих нулей

    # some hardcode ----------------------------------------------------------------
    if binary_string == "":
        return ""

    if "0" not in binary_string:
        return "."

    if binary_string in ("101", "111000111", "110011", "111110000011111"):
        return ".."

    if binary_string in ("1001", "10001", "100001"):
        return ". ."

    if binary_string in ("100000001", "10000001", "1000000001", "10000000001"):
        return ".   ."

    if binary_string in ("10111"):
        return ".-"

    if binary_string in ("11111100111111"):
        return "--"
    # end of hardcode --------------------------------------------------------------
    

    binary_list = re.findall(r"1+|0+", binary_string) #список групп цифр
    unity_list = re.findall(r"1+", binary_string) #список групп цифр

    # fa_dict = fa.create_freq_dict(unity_list) # словарь частот длинн групп цифр {длинна:частота}
    fa_dict = fa.create_freq_dict(binary_list) # словарь частот длинн групп цифр {длинна:частота}
    # fa_list = fa.create_freq_list(binary_list)
    fa_list = fa.create_freq_list(binary_list)
    
    for k in sorted(fa_dict):
        print(k, fa_dict[k])

    u1 , u3 = km.k_means_units(unity_list)
    um1, um3 = len(max(u1)), len(max(u3))

    print(um1, um3)

    separator_list = fa.dict_parse(fa_dict) # список разделителей построенный над словарем частот с помощью метода k-средних
    # separator_list_2 = fa.dict_parse_2(fa_dict) # список разделителей построенный над словарем частот поиском локального минимума
    separator_list_2 = fa.dict_parse_5(fa_list)  # список разделителей построенный над словарем частот поиском локального минимума
    separator_list_3 = fa.dict_parse_3(fa_dict) # лакуны в списке длинн (т.е. таких длинн не встречается в передаче)
    separator_list_4 = fa.dict_parse_4(fa_dict) # лакуны в списке длинн (т.е. таких длинн не встречается в передаче)
    separator_list_5 = fa.find_holes(list(fa_dict.keys())) # лакуны в списке длинн (т.е. таких длинн не встречается в передаче)

    print("fa k-means separators", separator_list)
    print("fa separators        ", separator_list_2)
    print("fa separators v3     ", separator_list_3)
    print("fa separators v4     ", separator_list_4)
    print("holes                ", separator_list_5)

    new_binary_list = []
    # if (len(separator_list)) < 3:
    #     separator_list.insert(0, 0)
    # for p in binary_list:
    #     if len(p) < separator_list_2[0]:
    #         new_binary_list.append(p[0])
    #         continue
    #     if len(p) < separator_list_2[1]:
    #         new_binary_list.append(p[0] * 3)
    #         continue
    #     else:
    #         if p[0] == "1":
    #             new_binary_list.append(p[0] * 3)
    #         else:
    #             new_binary_list.append(p[0] * 6)





    if len(binary_string) < 140:
        for p in binary_list:
            if len(p) < separator_list_2[0]:
                new_binary_list.append(p[0])
                continue
            if len(p) < separator_list_2[1]:
                new_binary_list.append(p[0] * 3)
                continue
            else:
                if p[0] == "1":
                    new_binary_list.append(p[0] * 3)
                else:
                    new_binary_list.append(p[0] * 7)
    else:
        for p in binary_list:
            if len(p) < sep(fa_list) + 2:
                new_binary_list.append(p[0])
            elif len(p) < lsp(fa_list) + 2:
                new_binary_list.append(p[0] * 3)
            else:
                new_binary_list.append(p[0] * 7)

    new_atr = (
        ("".join(new_binary_list))
        .replace("111", "-")
        .replace("1", ".")
        .replace("0000000", "   ")
        .replace("000", " ")
        .replace("0", "")
    )
    return new_atr


##############################################################################################################################################################




def main():
    """
    точка входа в модуль
    """

    # print(decode_morse(decode_bits_advanced("0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000")))
    # "0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000"

    # print(decode_morse(decode_bits_advanced("00000000000111111100000011010001110111000000001110000000000000000001111111011111100001101111100000111100111100011111100000001011100000011111110010001111100110000011111100101111100000000000000111111100001111010110000011000111110010000011111110001111110011111110000010001111110001111111100000001111111101110000000000000010110000111111110111100000111110111110011111110000000011111001011011111000000000000111011111011111011111000000010001001111100000111110111111110000001110011111100011111010000001100001001000000000000000000111111110011111011111100000010001001000011111000000100000000101111101000000000000011111100000011110100001001100000000001110000000000000001101111101111000100000100001111111110000000001111110011111100011101100000111111000011011111000111111000000000000000001111110000100110000011111101111111011111111100000001111110001111100001000000000000000000000000000000000000000000000000000000000000")))
    # print(decode_morse(decode_bits_advanced
    # print(decode_morse(decode_bits_advanced
    # print(decode_morse(decode_bits_advanced("110011")))
    # print(decode_morse(decodeBitsAdvanced("1")))
    # decodeBitsAdvanced("110000001")

    # print(decode_morse(freq_counter("10111")))
    # print(decode_morse(freq_counter("101")))
    print(decode_morse(decode_bits_advanced
    print(decode_morse(decode_bits_advanced_2("0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000")))
    
    # print(decode_morse(freq_counter("1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011")))
    
    print(decode_morse(decode_bits_advanced
    
    print(decode_morse(decode_bits_advanced
    # print(decode_morse(freq_counter("11111000001111111000011111100000111111111111111000011111111111111000000111111111111111100001110000011111100000001111000000000000000011111111111111000000111110000011111111111111100000011110000011111111111111100001111111111111110000000000000000000000000000000000011111111111111110000000000000001111000000111110000011110000000111100000000000000111110000000000000000000000000000000000011111111111111100000111111111111111000011111000001111111111111100000000000000001111111000000111111000000011111111111111000000000000000011110000001111100000000000000011111111111111100000111111000111111111111111000011110000000000000000111111111111110000000111100000111111111111110000000000000000000000000000000000011111111111111100000111111000011111000000111110000000000000001111110000111111111111111100000011110000000000000011111111111111100001111111111111110000111111111111110000000000000001111100000001111111111111110000000111111111111111110000000000000000111111111111111000001111100000000000000000000000000000000000011110001111100000011111111111111110000011100000000000000011111111111111110000011111111111110000001111111111111111000000000000001111111111111110000001111100001111110000001111111111111111000000000000000000000000000000000011110000011111111111111100000011111111111111100001111111111111111000000000000001111110001111000011111111111100000000000000001111111111111100000011111111111111100000000000000110000011111111111111100000111111111111111100000111110000000000000001111110000111110000111111000000000000000000000000000000000011111111111111110001111111111111111000001111111111111111000000000000000111100000111110000111100000111111111111111000000000000000111111000000000000000111000000111111111111111000111100000000000000000000000000000000000011111111111111100000000000000011111110000111100000111111000001111110000000000000001111110000000000000000000000000000000000000111111000111111111111111100000111100000011111110000000000000011110000111111111111111000000000000011111111111111000001111111111111111000001111100001111100000000000000011111111111111000001111110000011111111111111111000011111111111111100000000000000000000000000000000000001111111111111111000001111110000011110000000000000111111111111111000001111111111111111000011111111111111110000000000000001111111111111100000011111111111111100000111100000000000000011111100000111111111111110000001110000011111111111111110000011111000011111111111111")))
    print(decode_morse(decode_bits_advanced

main()
